#include "src/Model.h"

const unsigned int Width = 1920;
const unsigned int Height = 1920;
bool face_culling = false;
bool anti_aliasing = true;
int samples = 8;
//Anti-Aliasing = MSAA


float skyboxVertices[] = {
        //   Coordinates
        -1.0f, -1.0f,  1.0f,//        7--------6
        1.0f, -1.0f,  1.0f,//       /|       /|
        1.0f, -1.0f, -1.0f,//      4--------5 |
        -1.0f, -1.0f, -1.0f,//      | |      | |
        -1.0f,  1.0f,  1.0f,//      | 3------|-2
        1.0f,  1.0f,  1.0f,//      |/       |/
        1.0f,  1.0f, -1.0f,//      0--------1
        -1.0f,  1.0f, -1.0f
};

unsigned int skyboxIndices[] =
        {
                // Right
                1, 2, 6,
                6, 5, 1,
                // Left
                0, 4, 7,
                7, 3, 0,
                // Top
                4, 5, 6,
                6, 7, 4,
                // Bottom
                0, 3, 2,
                2, 1, 0,
                // Back
                0, 1, 5,
                5, 4, 0,
                // Front
                3, 7, 6,
                6, 2, 3
        };


int main(){
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    if(anti_aliasing)
        glfwWindowHint(GLFW_SAMPLES, samples);

    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);


    GLFWwindow* window = glfwCreateWindow(Width, Height, "Window", NULL, NULL);
    if (window == NULL){
        std::cout << "Failed to Create a Window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);

    gladLoadGL();

    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
        std::cout << "Failed to initialize GLAD" << std::endl;
        glfwTerminate();
        return -1;
    }

    glViewport(0, 0, Width, Height);


    Shader shaderProgram("src/Shaders/default.vert","src/Shaders/default.frag", "src/Shaders/default.geom");
    Shader normalsShaderProgram("src/Shaders/default.vert","src/Shaders/normals.frag", "src/Shaders/normals.geom");
    //Shader skyboxShader("src/Shaders/skybox.vert","src/Shaders/skybox.frag", "src/Shaders/default.geom" );


    glm::vec4 lightColor = glm::vec4(1.0f, 1.0f, 1.0f, 1.0f);
    glm::vec3 lightPos = glm::vec3(0.5f, 0.5f, 0.5f);





    shaderProgram.Activate();
    glUniform4f(glGetUniformLocation(shaderProgram.ID, "lightColor"), lightColor.x, lightColor.y, lightColor.z, lightColor.w);
    glUniform3f(glGetUniformLocation(shaderProgram.ID, "lightPos"), lightPos.x, lightPos.y, lightPos.z);
    /*
     skyboxShader.Activate();
     glUniform1i(glGetUniformLocation(skyboxShader.ID, "skybox"), 0);
 */



    glEnable(GL_DEPTH_TEST);
    if(anti_aliasing)
        glEnable(GL_MULTISAMPLE);

    if(face_culling) {
        glEnable(GL_CULL_FACE);
        glCullFace(GL_FRONT);
        glFrontFace(GL_CW);
    }
    // Configures the blending function
    //glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    Camera camera(Width, Height, glm::vec3( 2.07479f , 1.249f, -0.381916f));
    camera.Orientation = glm::vec3(-4.71458f, -1.41498f, 0.173473f);



    /*
     * Rotation x: 3.24507y: -2.10654z: 3.19486
        Position x:-4.46584 y:4.58132 z:-4.38143

     */

    Model plane("Models/statue/scene.gltf");

    double prevTime = 0.0;
    double crntTime = 0.0;
    double timeDiff = 0.0;
    unsigned int counter = 0;

/*
    unsigned int skyboxVAO, skyboxVBO, skyboxEBO;
    glGenVertexArrays(1, &skyboxVAO);
    glGenBuffers(1, &skyboxVBO);
    glGenBuffers(1, &skyboxEBO);
    glBindVertexArray(skyboxVAO);
    glBindBuffer(GL_ARRAY_BUFFER, skyboxVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(skyboxVertices), &skyboxVertices, GL_STATIC_DRAW);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, skyboxEBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(skyboxIndices), &skyboxIndices, GL_STATIC_DRAW);
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindVertexArray(0);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);

    std::string facesCubemap[6]={
            "Skyboxes/skybox/right.jpg",
            "Skyboxes/skybox/left.jpg",
            "Skyboxes/skybox/top.jpg",
            "Skyboxes/skybox/bottom.jpg",
            "Skyboxes/skybox/front.jpg",
            "Skyboxes/skybox/back.jpg"
    };

    unsigned int cubemapTexture;
    glGenTextures(1, &cubemapTexture);
    glBindTexture(GL_TEXTURE_CUBE_MAP, cubemapTexture);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    // These are very important to prevent seams
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);

    for(unsigned int i = 0; i < 6; i++){
        int width,height,nrChanels;
        unsigned char* data = stbi_load(facesCubemap[i].c_str(), &width, &height, &nrChanels, 0);
        if(data){
            stbi_set_flip_vertically_on_load(false);
            glTexImage2D(
                        GL_TEXTURE_CUBE_MAP_POSITIVE_X + i,
                        0,
                        GL_RGB,
                        width,
                        height,
                        0,
                        GL_RGB,
                        GL_UNSIGNED_BYTE,
                        data
                    );
            stbi_image_free(data);
        } else{
            std::cout << "Failed to load texture: "<<facesCubemap[i] << std::endl;
            stbi_image_free(data);
        }
    }
*/

    //VSYNC off
    glfwSwapInterval(0);

    while (!glfwWindowShouldClose(window)){

        crntTime = glfwGetTime();
        timeDiff = crntTime-prevTime;
        counter++;
        if(timeDiff >= 1.0 / 30.0){
            std::string FPS = std::to_string((1.0/timeDiff)*counter);
            std::string ms = std::to_string((timeDiff/counter)*1000);
            std::string newTitle = "Game - "+FPS+"FPS / "+ms+"ms";
            glfwSetWindowTitle(window, newTitle.c_str());
            prevTime = crntTime;
            counter = 0;
        }

        //Draw Code
        glClearColor(0.07f, 0.13f, 0.17f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);


        camera.Inputs(window);
        camera.updateMatrix(45.0f, 0.1f, 1000.0f);

        plane.Draw(shaderProgram, camera);
        plane.Draw(normalsShaderProgram, camera);

/*
        //skybox
        glDepthFunc(GL_EQUAL);

        skyboxShader.Activate();
        glm::mat4 view = glm::mat4(1.0f);
        glm::mat4 projection = glm::mat4(1.0f);
        view = glm::mat4(glm::mat3(glm::lookAt(camera.Position, camera.Position + camera.Orientation, camera.Up)));
        projection = glm::perspective(glm::radians(45.0f), (float)Width / Height, 0.1f, 100.0f);
        glUniformMatrix4fv(glGetUniformLocation(skyboxShader.ID, "view"), 1, GL_FALSE, glm::value_ptr(view));
        glUniformMatrix4fv(glGetUniformLocation(skyboxShader.ID, "projection"), 1, GL_FALSE, glm::value_ptr(projection));

        // Draws the cubemap as the last object so we can save a bit of performance by discarding all fragments
        // where an object is present (a depth of 1.0f will always fail against any object's depth value)
        glBindVertexArray(skyboxVAO);
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_CUBE_MAP, cubemapTexture);
        glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_INT, 0);
        glBindVertexArray(0);

        // Switch back to the normal depth function
        glDepthFunc(GL_LESS);
*/

        glfwSwapBuffers(window);

        glfwPollEvents();

    }

    shaderProgram.Delete();
    normalsShaderProgram.Delete();
    //skyboxShader.Delete();

    glfwDestroyWindow(window);
    glfwTerminate();
    return 0;
}
